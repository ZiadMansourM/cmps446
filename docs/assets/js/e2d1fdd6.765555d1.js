"use strict";(self.webpackChunkscanmate=self.webpackChunkscanmate||[]).push([[373],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>g});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),p=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},m=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),c=p(a),u=r,g=c["".concat(l,".").concat(u)]||c[u]||d[u]||i;return a?n.createElement(g,o(o({ref:t},m),{},{components:a})):n.createElement(g,o({ref:t},m))}));function g(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},3947:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var n=a(7462),r=(a(7294),a(3905));const i={sidebar_position:2,id:"Jupiter Notebooks",description:"Load and mask image.",slug:"/lab-one/jupiter-notebooks"},o=void 0,s={unversionedId:"lab-one/Jupiter Notebooks",id:"lab-one/Jupiter Notebooks",title:"Jupiter Notebooks",description:"Load and mask image.",source:"@site/docs/lab-one/jupiter.md",sourceDirName:"lab-one",slug:"/lab-one/jupiter-notebooks",permalink:"/lab-one/jupiter-notebooks",draft:!1,editUrl:"https://github.com/ZiadMansourM/cmps446/tree/main/docs/lab-one/jupiter.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,id:"Jupiter Notebooks",description:"Load and mask image.",slug:"/lab-one/jupiter-notebooks"},sidebar:"tutorialSidebar",previous:{title:"Introduction To Python",permalink:"/lab-one/python"},next:{title:"HSV Color Model",permalink:"/lab-one/hsv"}},l={},p=[{value:"\ud83d\udcdd Prepare Images",id:"-prepare-images",level:2}],m={toc:p},c="wrapper";function d(e){let{components:t,...a}=e;return(0,r.kt)(c,(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"-prepare-images"},"\ud83d\udcdd Prepare Images"),(0,r.kt)("ul",{className:"contains-task-list"},(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Reads all images and their masks."),(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Generate masks if they don't exist."),(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Populate our ",(0,r.kt)("inlineCode",{parentName:"li"},"Images")," data structure.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'@timeit\ndef prepare_images(create_mask = True, **kwargs) -> Images:\n    image_set_name = kwargs[\'image_set_name\']\n    folder_path = f"../data/{image_set_name}"\n    images: Images = Images([], folder_path.split("/")[-1])\n    files: list[str] = list(\n        filter(\n            lambda file: ".jpg" in file, os.listdir(f"{folder_path}/images")\n        )\n    )\n    if create_mask:\n        for file in files:\n            image_path = f"{folder_path}/images/{file}"\n            rgb_image = OpenCV.cvtColor(OpenCV.imread(image_path), OpenCV.COLOR_BGR2RGB)\n            gray_image = OpenCV.cvtColor(rgb_image, OpenCV.COLOR_RGB2GRAY)\n            mask = remove(rgb_image)\n            mask = OpenCV.cvtColor(mask, OpenCV.COLOR_RGB2GRAY)\n            mask[mask > 0] = 255\n            OpenCV.imwrite(f"{folder_path}/masks/{file}", mask)\n            kernel = np.ones((5, 5), np.uint8)\n            dilated_mask = OpenCV.dilate(mask, kernel, iterations=20)\n            images.images.append(Image(file.split(".")[0], rgb_image, gray_image, dilated_mask, [], [], image_path))\n    else:\n        for file in files:\n            image_path = f"{folder_path}/images/{file}"\n            mask_path = f"{folder_path}/masks/{file}"\n            rgb_image = OpenCV.cvtColor(OpenCV.imread(image_path), OpenCV.COLOR_BGR2RGB)\n            gray_image = OpenCV.cvtColor(rgb_image, OpenCV.COLOR_RGB2GRAY)\n            mask = OpenCV.imread(mask_path, OpenCV.IMREAD_GRAYSCALE)\n            kernel = np.ones((5, 5), np.uint8)\n            dilated_mask = OpenCV.dilate(mask, kernel, iterations=20)\n            images.images.append(Image(file.split(".")[0], rgb_image, gray_image, dilated_mask, [], [], image_path))\n    return images\n')))}d.isMDXComponent=!0}}]);