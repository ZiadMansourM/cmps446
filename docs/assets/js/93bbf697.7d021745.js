"use strict";(self.webpackChunkscanmate=self.webpackChunkscanmate||[]).push([[285],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>d});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),m=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},c=function(e){var t=m(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=m(a),p=r,d=u["".concat(l,".").concat(p)]||u[p]||g[p]||i;return a?n.createElement(d,s(s({ref:t},c),{},{components:a})):n.createElement(d,s({ref:t},c))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,s=new Array(i);s[0]=p;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[u]="string"==typeof e?e:r,s[1]=o;for(var m=2;m<i;m++)s[m]=a[m];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},2137:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>g,frontMatter:()=>i,metadata:()=>o,toc:()=>m});var n=a(7462),r=(a(7294),a(3905));const i={sidebar_position:4,id:"Lab Requirements",description:"Match similar images.",slug:"/lab-one/lab-requirements"},s=void 0,o={unversionedId:"lab-one/Lab Requirements",id:"lab-one/Lab Requirements",title:"Lab Requirements",description:"Match similar images.",source:"@site/docs/lab-one/lab-requirements.md",sourceDirName:"lab-one",slug:"/lab-one/lab-requirements",permalink:"/lab-one/lab-requirements",draft:!1,editUrl:"https://github.com/ZiadMansourM/cmps446/tree/main/docs/lab-one/lab-requirements.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,id:"Lab Requirements",description:"Match similar images.",slug:"/lab-one/lab-requirements"},sidebar:"tutorialSidebar",previous:{title:"HSV Color Model",permalink:"/lab-one/hsv"},next:{title:"Lab Two",permalink:"/category/lab-two"}},l={},m=[{value:"\ud83d\udcdd Image Matching/Stitching",id:"-image-matchingstitching",level:2}],c={toc:m},u="wrapper";function g(e){let{components:t,...a}=e;return(0,r.kt)(u,(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"-image-matchingstitching"},"\ud83d\udcdd Image Matching/Stitching"),(0,r.kt)("ul",{className:"contains-task-list"},(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Match similar images together into a cluster."),(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Images in a cluster has to see the very same points.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"@timeit\ndef image_matching(images_obj: Images, overwrite:bool =False, **kwargs) -> None:\n    def load_image(image_path, target_size=(224, 224)):\n        img = keras_image.load_img(image_path, target_size=target_size)\n        img = keras_image.img_to_array(img)\n        img = np.expand_dims(img, axis=0)\n        img = preprocess_input(img)\n        return img\n\n    image_set_name = kwargs['image_set_name']\n    image_dir = f'../data/{image_set_name}/images'\n    image_files = os.listdir(image_dir)\n    images = [load_image(os.path.join(image_dir, f)) for f in image_files]\n    images = np.vstack(images)\n\n    ssl_context = ssl.create_default_context(cafile=certifi.where())\n    ssl._create_default_https_context = ssl._create_unverified_context\n    model = ResNet50(weights='imagenet', include_top=False, pooling='avg')\n    features = model.predict(images)\n\n    kmeans = KMeans(n_clusters=images_obj.num_clusters, random_state=42)\n    clusters = kmeans.fit_predict(features)\n\n    for i, cluster in enumerate(clusters):\n        if cluster not in images_obj.similar_images:\n            images_obj.similar_images[cluster] = []\n        images_obj.similar_images[cluster].append(images_obj[int(image_files[i].split(\".\")[0])])\n")))}g.isMDXComponent=!0}}]);